#!/usr/bin/env python3
# inspired by gpgparticipants

import os
import re
import subprocess
from optparse import OptionParser
from libpius.util import MyOption
from libpius.constants import (
    DEFAULT_GPG_PATH,
    GPG_MIN_OPTS,
)
import html

def main():
    usage = ""
    parser = OptionParser(option_class=MyOption)
    parser.set_defaults(
        gpg_path=DEFAULT_GPG_PATH,
    )
    parser.add_option(
        "-r",
        "--keyring",
        dest="keyring",
        metavar="KEYRING",
        nargs=1,
        type="not_another_opt",
        help="The keyring to use. Be sure to specify full or"
        " relative path. Use a path: Just a filename may cause"
        " GPG to assume relative to ~/.gnupg and cause"
        " unexpected results.",
    )
    parser.add_option(
        "-b",
        "--gpg-path",
        dest="gpg_path",
        metavar="PATH",
        nargs=1,
        type="not_another_opt",
        help="Path to gpg binary. [default: %default]",
    )
    parser.add_option(
        "-t",
        "--title",
        dest="title",
        help="Title to put at the top of the page.",
    )
    parser.add_option(
        "-c",
        "--print-checksums",
        dest="print_checksums",
        action="store_true",
        help="Print checksums",
    )
    parser.add_option(
        "--html",
        dest="html_file",
        metavar="FILE",
        help="Output html file location.",
    )
    (options, args) = parser.parse_args()
    if options.keyring:
        options.keyring = os.path.expanduser(options.keyring)
        if not os.path.exists(options.keyring):
            parser.error("Keyring %s doesn't exist" % options.keyring)
    cmd = (
            [options.gpg_path]
            + (["--no-default-keyring", "--keyring", options.keyring] if options.keyring else [])
            + [
                "--list-keys",
                "--list-options", "no-show-photos,no-show-uid-validity,no-show-keyring,no-show-usage",
                "--keyid-format", "none",
                "--display-charset", "utf-8",
                "--with-fingerprint",
                "--no-auto-check-trustdb",
            ]
        )
    gpg = subprocess.Popen(
            cmd,
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            text=True,
            env={'LANGUAGE': 'en'}
        ).stdout.read()
    gpg = '\n'.join([l for l in gpg.strip().splitlines()[2:] if 'sub' not in l])
    keys = re.split(r"(?:\r?\n){2,}", gpg)
    htmltemplate = '''<html>
<head>
<meta charset="UTF-8">
<link href="https://fonts.googleapis.com/css2?family=Roboto+Mono:ital@0;1&display=swap" rel="stylesheet"> 
<style>
@page { size: A4; margin: 2cm; }
h1 { text-align: center; }
.block {
    white-space: pre;
    break-inside: avoid;
}
body { font-family: "Roboto Mono", monospace; font-size: 12px;}
.gap { font-size: 20px; }
</style>
</head>
<body>
'''+('<h1>'+options.title+'</h1><hr>\n'
    if options.title else '')+('''<div class="block">
[ ] SHA256: <span class="gap">____ ____   ____ ____   ____ ____   ____ ____</span>

            <span class="gap">____ ____   ____ ____   ____ ____   ____ ____</span>

[ ] RIPEMD160: <span class="gap">____ ____ ____ ____ ____</span>

               <span class="gap">____ ____ ____ ____ ____</span>

You can compute checksums using:
    gpg --print-md SHA256 <i>file</i>
    gpg --print-md RIPEMD160 <i>file</i><hr></div>
''' if options.print_checksums else '')+'\n'.join([
    '<div class="block">'
    +html.escape(("%03d   [ ] Fingerprint OK [ ] ID OK\n" % i) + k)+'<hr></div>'
            for i, k in enumerate(keys, start=1)
        ])+'''
</body>
</html>'''
    if options.html_file:
        with open(options.html_file, 'w') as f:
            f.write(htmltemplate)
    else:
        print(htmltemplate)

if __name__ == "__main__":
    main()
